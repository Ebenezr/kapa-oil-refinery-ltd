// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    phone         String
    emailVerified DateTime?
    image         String?
    password      String
    addresses     Address[]
    accounts      Account[]
    sessions      Session[]
}

model Address {
    id      String @id @default(cuid())
    line1   String
    line2   String
    county  String
    town    String
    station String
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Review {
    id            String          @id @default(cuid())
    text          String
    rating        Int
    ProductReview ProductReview[]
}

model Product {
    id          Int             @id @default(autoincrement())
    name        String
    description String?
    price       Float
    image_url   String
    size        String
    category    ProductCategory @relation(fields: [categoryId], references: [id])
    categoryId  Int
    review      ProductReview[]
    reviewId    Int
    discount    ProductDiscount @relation(fields: [discountId], references: [id])
    discountId  Int
}

model ProductReview {
    id        Int     @id @default(autoincrement())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    rating    Int?
    decs      String?
    Review    Review? @relation(fields: [reviewId], references: [id])
    reviewId  String?
}

model ProductCategory {
    id        Int       @id @default(autoincrement())
    name      String
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model ProductInventory {
    id        Int      @id @default(autoincrement())
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductDiscount {
    id                  Int       @id @default(autoincrement())
    name                String
    percentage_discount Decimal
    active              Boolean
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    Product             Product[]
}
